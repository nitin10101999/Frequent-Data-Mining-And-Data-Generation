# -*- coding: utf-8 -*-
"""Eclat.ipynb

Automatically generated by Colaboratory.

Original file is located at
		https://colab.research.google.com/drive/18CVxXNARHfZmpAtAKbGsna01GPzUykVZ
"""

#import os
#os.chdir('/content/drive/My Drive/Code')

import numpy as np
import pandas as pd
import copy 
import math
import csv
import time
import sys
import os
import psutil

# Default value
MIN_SUPPORT_COUNT = 1
FRACTION = 0.005
NO_OF_TRANSACTION = 100
MAX_FREQ_ITEMSET_SIZE = 5
NO_OF_FREQ_ITEM = 1
TRANSACTION_AVG_WIDTH = 4
TOTAL_ITEMS = 10
EXECUTION_TIME = 0

def Eclat(P,F):
	i = 0
	for Xa in P:
		F[Xa] = len(P[Xa])
		j = 0
		Pa = {}
		for Xb in P:
			if j <= i:
				j = j +1
				continue
			#print(Xa,'-',Xb)
			setXa = set(Xa)#set(Xa.split('|'))
			setXb = set(Xb)#set(Xb.split('|'))
			Xab = setXa.union(setXb)
			t_Xab = P[Xa].intersection(P[Xb])
			if len(t_Xab) >= MIN_SUPPORT_COUNT:
				#print(t_Xab)
				Pa[tuple(Xab)] = t_Xab
			j = j+1
		if len(Pa) != 0:
			Eclat(Pa,F)
			
		i = i + 1

def fetchtxtData(data,filename):
	# Using readlines() 
	file_read = open(filename, 'r') 
	Lines = file_read.readlines() 

	count = 0
	# Strips the newline character 
	TotalItems = 0
	UniqueItems = set()
	
	for line in Lines: 
		arr = line.split(" ")
		arr = arr[:len(arr)-1]
		UniqueItems = UniqueItems.union(set(arr))
		TotalItems = TotalItems + len(arr)
		data.append(arr)
		count = count + 1
	#set data
	global NO_OF_TRANSACTION
	global TRANSACTION_AVG_WIDTH
	global TOTAL_ITEMS

	NO_OF_TRANSACTION = count
	TRANSACTION_AVG_WIDTH = TotalItems/NO_OF_TRANSACTION
	TOTAL_ITEMS = len(UniqueItems)
	return list(UniqueItems)	

def fetchCSVdata(data,filename):
	reader = csv.reader(open(filename, 'r'), delimiter=',')
	DataSet = [list(row[1:]) for row in reader]
	DataSet = DataSet[1:]
	
	count = 0
	TotalItems = 0
	uniqueItems = set()
	for trans in DataSet:
		newlist = []
		for elem in trans:
			if elem == '':
				break
			newlist.append(elem)
		uniqueItems = uniqueItems.union(set(newlist))
		data.append(newlist)
		count += 1
		TotalItems += len(newlist)
	# set data
	global NO_OF_TRANSACTION
	global TRANSACTION_AVG_WIDTH
	global TOTAL_ITEMS
	NO_OF_TRANSACTION = count
	TRANSACTION_AVG_WIDTH = TotalItems/NO_OF_TRANSACTION
	TOTAL_ITEMS = len(uniqueItems)
	return list(uniqueItems)

def EclatUtil(data):
	transData = {}
	index = 0
	while index< len(data):
		for item in data[index]:
			lst = [item]
			#print(lst)
			try:
				oldSet = transData[tuple(lst)]
				oldSet.add(index)
			except:
				newSet = set()
				newSet.add(index)
				transData[tuple(lst)] = newSet
		index = index + 1
	sortOrderData = dict(sorted(transData.items(),key = lambda x: len(x[1]),reverse = True))
	newtransData = sortOrderData.copy()
	for key in sortOrderData:
		if len(newtransData[key]) <	MIN_SUPPORT_COUNT:
			del newtransData[key]
	#print(newtransData)
	F = {}
	Eclat(newtransData,F)
	MaxLen = 0
	# find Maxlen
	for key in F:
		lst = list(key) #key.split('|')
		if len(lst) > MaxLen:
			MaxLen = len(lst)
	MaxFreqItemSet = []
	MaxFreqItemCount = []
	for key in F:
		lst	= list(key)#key.split('|')
		if len(lst) == MaxLen:
			MaxFreqItemSet.append(lst)
			MaxFreqItemCount.append(F[key])
	#print(MaxLen)
	global MAX_FREQ_ITEMSET_SIZE
	global NO_OF_FREQ_ITEM
	MAX_FREQ_ITEMSET_SIZE = MaxLen
	NO_OF_FREQ_ITEM = len(MaxFreqItemSet)
	for item in MaxFreqItemSet:
		print(item)

def printData():
	print('----------------------------------------------------')
	print('Minimum support Count:',MIN_SUPPORT_COUNT)
	print('No of Transaction:',NO_OF_TRANSACTION)
	print('Avg Width of Transaction:',TRANSACTION_AVG_WIDTH)
	print('Total Items:',TOTAL_ITEMS)
	print('Max Freq Item Size:',MAX_FREQ_ITEMSET_SIZE)
	print('No of Freq Items:',NO_OF_FREQ_ITEM)
	print('Execution Time:',EXECUTION_TIME)
	print('Memory Used in Bytes',MEMORY)


def main():
	args = sys.argv 
	fileName = ''
	global FRACTION
	isCSV = True
	try:
		 fileName = args[1]
		 if fileName[-3:] == 'txt':
		 	isCSV = False
		 FRACTION = float(args[2])
	except:
		print('Error in Command Line Input!\nPlease Enter Format: python <DatafileName> <Fraction>')
		return
	start_time = time.time()
	data = []
	if isCSV:
		uniqueItems = fetchCSVdata(data,fileName)
	else:
		uniqueItems = fetchtxtData(data,fileName)


	global MIN_SUPPORT_COUNT
	MIN_SUPPORT_COUNT = math.ceil(NO_OF_TRANSACTION * FRACTION)
	EclatUtil(data)
	end_time = time.time()
	global EXECUTION_TIME
	EXECUTION_TIME = end_time - start_time
	process = psutil.Process(os.getpid())
	global MEMORY
	MEMORY = process.memory_info().rss
	printData()

if __name__ == "__main__":
    main()
	
